<div id="announcement-bar" class="announcement-static">
  <div class="announcement-inner">
    {% if section.blocks.size > 1 %}
      <button id="ann-prev" class="ann-arrow ann-left" aria-label="Previous announcement">
        {% render 'icon-left-arrow', class: 'size-5 md:size-6' %}
      </button>
      <button id="ann-next" class="ann-arrow ann-right" aria-label="Next announcement">
        {% render 'icon-right-arrow', class: 'size-5 md:size-6' %}
      </button>
    {% endif %}
    <div class="ann-slider">
      <div id="ann-sliderWrapper">
        {% if section.blocks.size > 0 %}
          {% for block in section.blocks %}
            <div class="ann-slide" {{ block.shopify_attributes }}>
              <p class="announcement-text">
                {{ block.settings.text | escape }}
                {% if block.settings.show_link and block.settings.link_url != blank %}
                  <a href="{{ block.settings.link_url }}" class="announcement-link">
                    {{ block.settings.link_text | default: 'SHOP NOW' | escape }}
                  </a>
                {% endif %}
              </p>
            </div>
          {% endfor %}
        {% else %}
          <div class="ann-slide">
            <p class="announcement-text">
              {{ section.settings.banner_text | escape }}
              {% if section.settings.show_link and section.settings.link_url != blank %}
                <a href="{{ section.settings.link_url }}" class="announcement-link">
                  {{ section.settings.link_text | default: 'SHOP NOW' | escape }}
                </a>
              {% endif %}
            </p>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<style>
    /* 1) Set a fixed height and expose it as --bar-h for the header */
    :root {
      --bar-h: 50px;
    } /* 2) Fixed bar at very top */
    #announcement-bar.announcement-static {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: var(--bar-h);
      min-height: 44px;         /* ← floor so it never looks tiny */
      padding: 12px 0;
      z-index: 40;
      background: #d6d2c4;
      border-bottom: 1px solid rgba(33, 35, 34, 0.2);
      transform: translateY(var(--header-shift, 0px));
    } /* 3) Simple centering */
    #announcement-bar .announcement-inner {
      position: relative;
      max-width: 700px;
      margin: 0 auto;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 8px 12px;
    } /* 4) Readable text, no surprises */
    #announcement-bar .announcement-text,
    #announcement-bar .announcement-link {
      color: #212322 !important;
    }
    #announcement-bar .announcement-text {
      margin: 0;
      font-size: 11px;
      text-transform: uppercase;
      line-height: 1.4;
      text-align: center;
    }
    #announcement-bar .announcement-link {
      margin-left: 4px;
      text-decoration: underline;
      opacity: 0.8;
    }
    #announcement-bar .announcement-link:hover {
      opacity: 1;
    }

    /* Slider layout: no movement yet */
    .ann-slider {
      overflow: hidden; /* hide extra slides */
      position: relative;
      {% comment %} height: 100%; {% endcomment %}
    }
    #ann-sliderWrapper {
      display: flex; /* horizontal strip of slides */
      align-items: center;
      {% comment %} height: 100%; {% endcomment %}
      /* no transform yet – we’ll add it in Step 3 */

      transition: transform 0.35s ease-in-out;
    }
    .ann-slide {
      flex: 0 0 100%; /* each slide takes full width */
      display: flex;
      align-items: center;
      justify-content: center;
      {% comment %} height: 100%; {% endcomment %}
    }

    /* Shared arrow styles */
    .ann-arrow {
      position: absolute;
      top: 0;
      bottom: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 36px; /* tappable target */
      background: transparent;
      border: 0;
      cursor: pointer;
      padding: 0;
      line-height: 0;
      opacity: 0.85;
      z-index: 1; /* above slides */
    }
    .ann-arrow:hover {
      opacity: 1;
    }

    /* Left/right placement */
    .ann-left {
      left: 6px;
    }
    .ann-right {
      right: 6px;
    }

    /* Nudge the slider content so arrows don’t overlap text too much on very small screens */
    @media (max-width: 480px) {
      .ann-slider {
        padding: 0 36px;
      } /* create space for arrows */
    }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const wrap = document.getElementById('ann-sliderWrapper');
    if (!wrap) return;

    const slides = Array.from(wrap.children);
    const total = slides.length;
    if (total <= 1) return; // nothing to slide yet

    let i = 0;
    const intervalMs = 5000; // rotate every 5s
    const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    function go(n) {
      i = (n + total) % total;
      wrap.style.transform = 'translateX(' + -i * 100 + '%)';

      const bar = document.getElementById('announcement-bar');
      if (bar && typeof bar.__measure === 'function') bar.__measure();
    }

    let timer = null;
    function start() {
      if (!prefersReduced && !timer) timer = setInterval(() => go(i + 1), intervalMs);
    }
    function stop() {
      if (timer) {
        clearInterval(timer);
        timer = null;
      }
    }

    wrap.addEventListener('transitionend', (e) => {
      if (e.propertyName !== 'transform') return;
      const bar = document.getElementById('announcement-bar');
      if (bar && typeof bar.__measure === 'function') bar.__measure();
    });

    // Wire buttons (only present if total > 1)
    const btnPrev = document.getElementById('ann-prev');
    const btnNext = document.getElementById('ann-next');
    if (btnPrev)
      btnPrev.addEventListener('click', () => {
        stop();
        go(i - 1);
        start();
      });
    if (btnNext)
      btnNext.addEventListener('click', () => {
        stop();
        go(i + 1);
        start();
      });

    // (Optional) keyboard support on the whole bar
    const bar = document.getElementById('announcement-bar');
    if (bar) {
      bar.setAttribute('tabindex', '0');
      bar.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          stop();
          go(i - 1);
          start();
        }
        if (e.key === 'ArrowRight') {
          stop();
          go(i + 1);
          start();
        }
      });
    }

    // Pause on hover/focus (nice UX)
    const slider = document.querySelector('.ann-slider');
    if (slider) {
      slider.addEventListener('mouseenter', stop);
      slider.addEventListener('mouseleave', start);
      slider.addEventListener('focusin', stop);
      slider.addEventListener('focusout', start);
    }

    // Basic touch swipe
    let startX = null;
    wrap.addEventListener(
      'touchstart',
      (e) => {
        startX = e.touches[0].clientX;
      },
      { passive: true }
    );
    wrap.addEventListener(
      'touchmove',
      (e) => {
        if (startX == null) return;
        const dx = e.touches[0].clientX - startX;
        if (Math.abs(dx) > 40) {
          go(i + (dx < 0 ? 1 : -1));
          startX = null;
        }
      },
      { passive: true }
    );
    wrap.addEventListener(
      'touchend',
      () => {
        startX = null;
      },
      { passive: true }
    );

    // Kick off
    start();
  });
</script>

<script>
  (function () {
    const bar = document.getElementById('announcement-bar');
    if (!bar) return;

    function setBarVar(px) {
      document.documentElement.style.setProperty('--bar-h', (px || 0) + 'px');
    }

    let measuring = false;
    function measure() {
      if (measuring) return;
      measuring = true;
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          const h = Math.round(bar.getBoundingClientRect().height); // measure OUTER bar (includes padding/border)
          setBarVar(h);
          document.dispatchEvent(new CustomEvent('announcement:measured', { detail: { height: h } }));
          measuring = false;
        });
      });
    }

    measure();
    window.addEventListener('load', measure, { passive: true });
    window.addEventListener('resize', measure, { passive: true });
    if ('ResizeObserver' in window) new ResizeObserver(measure).observe(bar);

    // allow slider to nudge measurement after slide changes:
    bar.__measure = measure;
  })();
</script>

{% schema %}
{
  "name": "Announcement bar (static)",
  "settings": [
    {
      "type": "text",
      "id": "banner_text",
      "label": "Banner text",
      "default": "FREE SHIPPING ON ORDERS $40+"
    },
    {
      "type": "checkbox",
      "id": "show_link",
      "label": "Show link",
      "default": true
    },
    {
      "type": "url",
      "id": "link_url",
      "label": "Link URL",
      "info": "Shown only when “Show link” is enabled."
    },
    {
      "type": "text",
      "id": "link_text",
      "label": "Link text",
      "default": "SHOP NOW"
    }
  ],

  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        { "type": "text", "id": "text", "label": "Banner text", "default": "FREE SHIPPING ON ORDERS $40+" },
        { "type": "checkbox", "id": "show_link", "label": "Show link", "default": true },
        { "type": "url", "id": "link_url", "label": "Link URL" },
        { "type": "text", "id": "link_text", "label": "Link text", "default": "SHOP NOW" }
      ]
    }
  ],
  "max_blocks": 5,
  "presets": [
    {
      "name": "Announcement bar (static)",
      "blocks": [
        {
          "type": "slide",
          "settings": {
            "text": "FREE SHIPPING ON ORDERS $40+",
            "show_link": true,
            "link_text": "SHOP NOW",
            "link_url": "/collections/shop-all"
          }
        }
      ]
    }
  ]
}
{% endschema %}
